/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.kgb.js.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.kgb.js.psi.JSTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>JSLexer.flex</tt>
 */
public class JSLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13664 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\16\1\25\1\53\1\54\1\55\1\56\1\57\1\60\2\16\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\1\1\64\1\65\1\22\1\55\1\66\1\1\1\67\1\16\1\70\1\71\1\54\1\55\1\66\1\1\1"+
    "\60\1\16\1\41\1\72\1\73\1\74\1\75\1\1\1\67\2\1\1\76\1\36\1\55\1\51\1\1\1\77"+
    "\1\16\1\1\1\76\1\36\1\55\1\100\1\1\1\57\1\16\1\101\1\76\1\36\1\13\1\102\1"+
    "\57\1\103\1\16\1\42\1\104\1\105\1\13\1\106\1\107\3\1\1\25\2\13\1\110\1\107"+
    "\3\1\1\111\1\112\1\113\1\114\1\115\1\116\2\1\1\67\3\1\1\117\1\13\1\120\1\1"+
    "\1\121\7\1\2\13\1\30\1\103\1\1\1\122\1\123\1\124\1\125\1\1\2\13\1\126\2\13"+
    "\1\127\24\13\1\130\1\131\2\13\1\130\2\13\1\132\1\133\1\14\3\13\1\133\3\13"+
    "\1\30\2\1\1\13\1\1\5\13\1\134\1\25\45\13\1\135\1\13\1\136\1\30\4\13\1\30\1"+
    "\137\1\140\1\16\1\13\1\16\1\13\1\16\1\140\1\67\3\13\1\141\1\1\1\142\4\1\5"+
    "\13\1\27\2\13\1\143\4\13\1\40\1\13\1\144\3\1\1\13\1\145\1\47\2\13\1\146\1"+
    "\13\1\75\3\1\1\13\1\107\3\13\1\47\4\1\1\147\5\1\1\104\2\13\1\141\1\150\3\1"+
    "\1\151\1\13\1\152\1\42\2\13\1\40\1\1\2\13\1\141\1\1\1\37\1\42\1\13\1\145\6"+
    "\1\1\153\1\154\14\13\4\1\21\13\1\134\2\13\1\134\1\155\1\13\1\145\3\13\1\156"+
    "\1\157\1\160\1\120\1\157\1\161\1\1\1\162\2\1\1\163\1\1\1\164\1\1\1\120\6\1"+
    "\1\165\1\166\1\167\1\170\1\171\3\1\1\172\147\1\2\13\1\144\2\13\1\144\10\13"+
    "\1\173\1\174\2\13\1\126\3\13\1\175\1\1\1\13\1\107\4\176\4\1\1\103\35\1\1\177"+
    "\2\1\1\200\1\25\4\13\1\201\1\25\4\13\1\127\1\104\1\13\1\145\1\25\4\13\1\144"+
    "\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1\120\4"+
    "\1\2\13\1\145\20\13\1\120\1\13\1\202\1\1\2\13\1\144\1\103\1\13\1\145\4\13"+
    "\1\40\2\1\1\203\1\204\5\13\1\205\1\13\1\145\1\27\3\1\1\203\1\206\1\13\1\31"+
    "\1\1\3\13\1\141\1\204\2\13\1\141\3\1\1\207\1\42\1\13\1\40\1\13\1\107\1\1\1"+
    "\13\1\120\1\50\2\13\1\31\1\103\1\1\1\210\1\211\2\13\1\46\1\1\1\212\1\1\1\13"+
    "\1\213\3\13\1\214\1\215\1\216\1\30\1\64\1\217\1\220\1\176\2\13\1\127\1\40"+
    "\7\13\1\31\1\1\72\13\1\141\1\13\1\221\2\13\1\146\20\1\26\13\1\145\6\13\1\75"+
    "\2\1\1\107\1\222\1\55\1\223\1\224\6\13\1\16\1\1\1\151\25\13\1\145\1\1\4\13"+
    "\1\204\2\13\1\27\2\1\1\146\7\1\1\210\7\13\1\120\2\1\1\25\1\30\1\25\1\30\1"+
    "\225\4\13\1\144\1\226\1\227\2\1\1\230\1\13\1\14\1\231\2\145\2\1\7\13\1\30"+
    "\30\1\1\13\1\120\3\13\1\67\2\1\2\13\1\1\1\13\1\232\2\13\1\40\1\13\1\145\2"+
    "\13\1\233\3\1\11\13\1\145\6\1\2\13\1\27\3\13\1\141\11\1\23\13\1\107\1\13\1"+
    "\40\1\27\11\1\1\234\2\13\1\235\1\13\1\40\1\13\1\107\1\13\1\144\4\1\1\13\1"+
    "\236\1\13\1\40\1\13\1\75\4\1\3\13\1\237\4\1\1\67\1\240\1\13\1\141\2\1\1\13"+
    "\1\120\1\13\1\120\2\1\1\117\1\13\1\47\1\1\3\13\1\40\1\13\1\40\1\13\1\31\1"+
    "\13\1\16\6\1\4\13\1\46\3\1\3\13\1\31\3\13\1\31\60\1\1\151\2\13\1\27\4\1\1"+
    "\151\2\13\2\1\1\13\1\46\1\1\1\151\1\13\1\107\2\1\2\13\1\241\1\151\2\13\1\31"+
    "\1\242\1\243\2\1\1\13\1\22\1\146\5\1\1\244\1\245\1\46\2\13\1\144\2\1\1\71"+
    "\1\54\1\55\1\66\1\1\1\246\1\16\21\1\3\13\1\1\1\247\13\1\2\13\1\144\2\1\1\250"+
    "\2\1\3\13\1\1\1\251\3\1\2\13\1\30\5\1\1\13\1\75\30\1\4\13\1\1\1\103\34\1\3"+
    "\13\1\46\20\1\71\13\1\75\16\1\14\13\1\141\53\1\2\13\1\144\75\1\44\13\1\107"+
    "\33\1\43\13\1\46\1\13\1\144\7\1\1\13\1\145\1\1\3\13\1\1\1\141\1\1\1\151\1"+
    "\252\1\13\67\1\4\13\1\47\1\67\3\1\1\151\6\1\1\16\77\1\6\13\1\30\1\120\1\46"+
    "\1\75\66\1\5\13\1\210\3\13\1\140\1\253\1\254\1\255\3\13\1\256\1\257\1\13\1"+
    "\260\1\261\1\36\24\13\1\262\1\13\1\36\1\127\1\13\1\127\1\13\1\210\1\13\1\210"+
    "\1\144\1\13\1\144\1\13\1\55\1\13\1\55\1\13\1\212\3\1\14\13\1\47\123\1\1\255"+
    "\1\13\1\263\1\264\1\265\1\266\1\267\1\270\1\271\1\146\1\272\1\146\24\1\55"+
    "\13\1\107\2\1\103\13\1\47\15\13\1\145\150\13\1\16\25\1\41\13\1\145\36\1");

  /* The ZZ_CMAP_A table has 2992 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\14\1\2\2\1\1\3\22\0\1\4\1\21\1\11\2\0\1\32\1\35\1\7\1\26\1\27\1\13"+
    "\1\22\1\41\1\23\1\6\1\12\12\5\1\40\1\37\1\34\1\20\1\33\1\57\1\0\32\17\1\30"+
    "\1\10\1\31\1\0\1\16\1\0\1\47\1\62\1\54\1\64\1\45\1\46\1\17\1\61\1\55\1\17"+
    "\1\63\1\50\1\17\1\52\1\56\2\17\1\43\1\51\1\42\1\44\1\53\1\60\3\17\1\24\1\36"+
    "\1\25\7\0\1\1\12\0\1\4\11\0\1\15\12\0\1\15\4\0\1\15\5\0\27\15\1\0\12\15\4"+
    "\0\14\15\16\0\5\15\7\0\1\15\1\0\1\15\1\0\5\15\1\0\2\15\2\0\4\15\1\0\1\15\6"+
    "\0\1\15\1\0\3\15\1\0\1\15\1\0\4\15\1\0\23\15\1\0\13\15\10\0\6\15\1\0\26\15"+
    "\2\0\1\15\6\0\10\15\10\0\13\15\5\0\3\15\33\0\6\15\1\0\1\15\17\0\2\15\7\0\2"+
    "\15\12\0\3\15\2\0\2\15\1\0\16\15\15\0\11\15\13\0\1\15\30\0\6\15\4\0\2\15\4"+
    "\0\1\15\5\0\6\15\4\0\1\15\11\0\1\15\3\0\1\15\7\0\11\15\7\0\5\15\17\0\26\15"+
    "\3\0\1\15\2\0\1\15\7\0\11\15\4\0\10\15\2\0\2\15\2\0\26\15\1\0\7\15\1\0\1\15"+
    "\3\0\4\15\3\0\1\15\20\0\1\15\15\0\2\15\1\0\1\15\5\0\6\15\4\0\2\15\1\0\2\15"+
    "\1\0\2\15\1\0\2\15\17\0\4\15\1\0\1\15\3\0\3\15\20\0\11\15\1\0\2\15\1\0\2\15"+
    "\1\0\5\15\3\0\1\15\2\0\1\15\30\0\1\15\13\0\10\15\2\0\1\15\3\0\1\15\1\0\6\15"+
    "\3\0\3\15\1\0\4\15\3\0\2\15\1\0\1\15\1\0\2\15\3\0\2\15\3\0\3\15\3\0\14\15"+
    "\13\0\10\15\1\0\2\15\10\0\3\15\5\0\4\15\1\0\5\15\3\0\1\15\3\0\2\15\15\0\13"+
    "\15\2\0\1\15\21\0\1\15\5\0\22\15\3\0\10\15\1\0\11\15\1\0\1\15\2\0\7\15\11"+
    "\0\1\15\1\0\2\15\15\0\2\15\1\0\1\15\2\0\2\15\1\0\1\15\2\0\1\15\6\0\4\15\1"+
    "\0\7\15\1\0\3\15\1\0\1\15\1\0\1\15\2\0\2\15\1\0\4\15\1\0\2\15\11\0\1\15\2"+
    "\0\5\15\1\0\1\15\25\0\14\15\1\0\24\15\13\0\5\15\3\0\6\15\4\0\4\15\3\0\1\15"+
    "\3\0\2\15\7\0\3\15\4\0\15\15\14\0\1\15\1\0\6\15\1\0\1\15\5\0\1\15\2\0\13\15"+
    "\1\0\15\15\1\0\4\15\2\0\7\15\1\0\1\15\1\0\4\15\2\0\1\15\1\0\4\15\2\0\7\15"+
    "\1\0\1\15\1\0\4\15\2\0\16\15\2\0\6\15\2\0\15\15\2\0\1\15\1\4\17\15\1\0\10"+
    "\15\7\0\15\15\1\0\6\15\23\0\1\15\4\0\1\15\3\0\11\15\1\0\1\15\5\0\17\15\1\0"+
    "\16\15\2\0\14\15\13\0\1\15\15\0\7\15\7\0\16\15\15\0\2\15\11\0\4\15\1\0\4\15"+
    "\3\0\2\15\11\0\10\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\6\15\1\0\7\15\1\0\1\15"+
    "\3\0\3\15\1\0\7\15\3\0\4\15\2\0\6\15\4\0\13\4\15\0\2\1\5\0\1\4\17\0\1\4\1"+
    "\0\1\15\15\0\1\15\2\0\1\15\4\0\1\15\2\0\12\15\1\0\1\15\3\0\5\15\6\0\1\15\1"+
    "\0\1\15\1\0\1\15\1\0\4\15\1\0\13\15\2\0\4\15\5\0\5\15\4\0\1\15\4\0\2\15\13"+
    "\0\5\15\6\0\4\15\3\0\2\15\14\0\10\15\7\0\10\15\1\0\7\15\1\0\1\4\4\0\2\15\12"+
    "\0\5\15\5\0\2\15\3\0\7\15\6\0\3\15\12\0\2\15\13\0\11\15\2\0\27\15\2\0\7\15"+
    "\1\0\3\15\1\0\4\15\1\0\4\15\2\0\6\15\3\0\1\15\1\0\1\15\2\0\5\15\1\0\12\15"+
    "\12\0\5\15\1\0\3\15\1\0\10\15\4\0\7\15\3\0\1\15\3\0\2\15\1\0\1\15\3\0\2\15"+
    "\2\0\5\15\2\0\1\15\1\0\1\15\30\0\3\15\3\0\6\15\2\0\6\15\2\0\6\15\11\0\7\15"+
    "\4\0\5\15\3\0\5\15\5\0\1\15\1\0\10\15\1\0\5\15\1\0\1\15\1\0\2\15\1\0\2\15"+
    "\1\0\12\15\6\0\12\15\2\0\6\15\2\0\6\15\2\0\6\15\2\0\3\15\3\0\14\15\1\0\16"+
    "\15\1\0\2\15\1\0\2\15\1\0\10\15\6\0\4\15\4\0\16\15\2\0\1\15\1\0\14\15\1\0"+
    "\2\15\3\0\1\15\2\0\4\15\1\0\2\15\12\0\10\15\6\0\6\15\1\0\3\15\1\0\12\15\3"+
    "\0\1\15\12\0\4\15\25\0\1\15\1\0\1\15\3\0\7\15\1\0\1\15\1\0\4\15\1\0\17\15"+
    "\1\0\2\15\14\0\3\15\4\0\2\15\1\0\1\15\20\0\4\15\10\0\1\15\13\0\10\15\5\0\3"+
    "\15\2\0\1\15\2\0\2\15\2\0\4\15\1\0\14\15\1\0\1\15\1\0\7\15\1\0\21\15\1\0\4"+
    "\15\2\0\10\15\1\0\7\15\1\0\14\15\1\0\4\15\1\0\5\15\1\0\1\15\3\0\14\15\2\0"+
    "\10\15\1\0\2\15\1\0\1\15\2\0\1\15\1\0\12\15\1\0\4\15\1\0\1\15\1\0\1\15\6\0"+
    "\1\15\4\0\1\15\1\0\1\15\1\0\1\15\1\0\3\15\1\0\2\15\1\0\1\15\2\0\1\15\1\0\1"+
    "\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\2\15\1\0\1\15\2\0\4\15\1\0\7\15\1\0\4\15"+
    "\1\0\4\15\1\0\1\15\1\0\12\15\1\0\5\15\1\0\3\15\1\0\5\15\1\0\5\15");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\2\1\1\25"+
    "\1\26\1\27\11\7\1\30\3\7\1\3\1\0\1\31"+
    "\3\0\1\32\1\0\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\14\7"+
    "\1\47\3\7\1\50\1\0\1\51\1\52\6\7\1\53"+
    "\2\7\1\54\1\55\4\7\1\0\1\56\1\57\1\7"+
    "\1\60\3\7\1\61\1\62\3\7\1\0\2\7\1\63"+
    "\1\7\1\64\1\65\1\7\1\0\1\66\1\7\1\67"+
    "\1\7\1\70\1\7\1\71\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[126];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\65\0\324\0\u0109\0\u013e"+
    "\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\65\0\65"+
    "\0\65\0\65\0\65\0\65\0\65\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\65\0\65\0\65\0\u0385\0\u03ba\0\u03ef\0\u0424"+
    "\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\65\0\u0562\0\u0597"+
    "\0\u05cc\0\u0601\0\324\0\65\0\u0636\0\u0109\0\u066b\0\u06a0"+
    "\0\u06d5\0\65\0\65\0\u070a\0\u073f\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\65\0\65\0\u0774\0\u07a9\0\u07de"+
    "\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986"+
    "\0\u09bb\0\u01a8\0\u09f0\0\u0a25\0\u0a5a\0\u01a8\0\u0a8f\0\65"+
    "\0\65\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u01a8"+
    "\0\u0c02\0\u0c37\0\u01a8\0\u01a8\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b"+
    "\0\u0d40\0\u01a8\0\u01a8\0\u0d75\0\u01a8\0\u0daa\0\u0ddf\0\u0e14"+
    "\0\u01a8\0\u01a8\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52"+
    "\0\u01a8\0\u0f87\0\u01a8\0\u01a8\0\u0fbc\0\u0ff1\0\u01a8\0\u1026"+
    "\0\u01a8\0\u105b\0\65\0\u1090\0\u01a8\0\u01a8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[126];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\3\1\12\1\2\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\12\1\37\1\40\2\12\1\41\1\42\1\43"+
    "\1\44\1\45\1\12\1\46\1\47\1\12\1\50\1\12"+
    "\1\51\66\0\4\3\7\0\1\3\55\0\1\4\1\52"+
    "\56\0\7\53\1\54\1\55\54\53\10\56\1\57\1\54"+
    "\53\56\12\0\1\60\1\61\4\0\1\62\64\0\1\63"+
    "\51\0\1\12\10\0\2\12\22\0\15\12\1\0\5\12"+
    "\20\0\1\64\64\0\1\65\64\0\1\66\1\0\1\67"+
    "\62\0\1\70\2\0\1\71\61\0\1\72\64\0\1\73"+
    "\101\0\1\74\65\0\1\75\33\0\1\12\10\0\2\12"+
    "\22\0\1\12\1\76\13\12\1\0\1\12\1\77\3\12"+
    "\5\0\1\12\10\0\2\12\22\0\3\12\1\100\11\12"+
    "\1\0\5\12\5\0\1\12\10\0\2\12\22\0\6\12"+
    "\1\101\6\12\1\0\5\12\5\0\1\12\10\0\2\12"+
    "\22\0\2\12\1\102\2\12\1\103\6\12\1\104\1\0"+
    "\5\12\5\0\1\12\10\0\2\12\22\0\15\12\1\0"+
    "\1\105\4\12\5\0\1\12\10\0\2\12\22\0\2\12"+
    "\1\106\1\107\11\12\1\0\5\12\5\0\1\12\10\0"+
    "\2\12\22\0\5\12\1\110\7\12\1\0\5\12\5\0"+
    "\1\12\10\0\2\12\22\0\5\12\1\111\7\12\1\0"+
    "\5\12\5\0\1\12\10\0\2\12\22\0\4\12\1\112"+
    "\10\12\1\0\5\12\5\0\1\12\10\0\2\12\22\0"+
    "\15\12\1\0\1\12\1\113\3\12\5\0\1\12\10\0"+
    "\2\12\22\0\1\12\1\114\13\12\1\0\5\12\5\0"+
    "\1\12\10\0\2\12\22\0\3\12\1\115\10\12\1\116"+
    "\1\0\5\12\5\0\1\52\57\0\1\53\3\0\61\53"+
    "\1\56\3\0\61\56\1\60\3\0\61\60\1\61\1\0"+
    "\1\117\1\0\61\61\20\0\1\120\64\0\1\121\51\0"+
    "\1\12\10\0\2\12\22\0\2\12\1\122\12\12\1\0"+
    "\5\12\5\0\1\12\10\0\2\12\22\0\13\12\1\123"+
    "\1\12\1\0\5\12\5\0\1\12\10\0\2\12\22\0"+
    "\1\124\14\12\1\0\5\12\5\0\1\12\10\0\2\12"+
    "\22\0\7\12\1\125\5\12\1\0\5\12\5\0\1\12"+
    "\10\0\2\12\22\0\10\12\1\126\4\12\1\0\5\12"+
    "\5\0\1\12\10\0\2\12\22\0\6\12\1\127\6\12"+
    "\1\0\5\12\5\0\1\12\10\0\2\12\22\0\1\12"+
    "\1\130\13\12\1\0\5\12\5\0\1\12\10\0\2\12"+
    "\22\0\13\12\1\131\1\12\1\0\5\12\5\0\1\12"+
    "\10\0\2\12\22\0\6\12\1\132\6\12\1\0\5\12"+
    "\5\0\1\12\10\0\2\12\22\0\15\12\1\0\1\133"+
    "\4\12\5\0\1\12\10\0\2\12\22\0\1\12\1\134"+
    "\13\12\1\0\5\12\5\0\1\12\10\0\2\12\22\0"+
    "\7\12\1\135\5\12\1\0\5\12\5\0\1\12\10\0"+
    "\2\12\22\0\13\12\1\136\1\12\1\0\5\12\5\0"+
    "\1\12\10\0\2\12\22\0\3\12\1\137\11\12\1\0"+
    "\5\12\5\0\1\12\10\0\2\12\22\0\4\12\1\140"+
    "\10\12\1\0\5\12\14\0\1\141\55\0\1\12\10\0"+
    "\2\12\22\0\3\12\1\142\11\12\1\0\5\12\5\0"+
    "\1\12\10\0\2\12\22\0\7\12\1\143\5\12\1\0"+
    "\5\12\5\0\1\12\10\0\2\12\22\0\2\12\1\144"+
    "\12\12\1\0\5\12\5\0\1\12\10\0\2\12\22\0"+
    "\3\12\1\145\11\12\1\0\5\12\5\0\1\12\10\0"+
    "\2\12\22\0\12\12\1\146\2\12\1\0\5\12\5\0"+
    "\1\12\10\0\2\12\22\0\7\12\1\147\5\12\1\0"+
    "\5\12\5\0\1\12\10\0\2\12\22\0\1\150\14\12"+
    "\1\0\5\12\5\0\1\12\10\0\2\12\22\0\6\12"+
    "\1\151\6\12\1\0\5\12\5\0\1\12\10\0\2\12"+
    "\22\0\3\12\1\152\11\12\1\0\5\12\5\0\1\12"+
    "\10\0\2\12\22\0\6\12\1\153\6\12\1\0\5\12"+
    "\5\0\1\12\10\0\2\12\22\0\5\12\1\154\7\12"+
    "\1\0\5\12\5\0\1\12\10\0\2\12\22\0\5\12"+
    "\1\155\7\12\1\0\5\12\3\0\1\156\66\0\1\12"+
    "\10\0\2\12\22\0\1\12\1\157\13\12\1\0\5\12"+
    "\5\0\1\12\10\0\2\12\22\0\1\160\14\12\1\0"+
    "\5\12\5\0\1\12\10\0\2\12\22\0\3\12\1\161"+
    "\11\12\1\0\5\12\5\0\1\12\10\0\2\12\22\0"+
    "\12\12\1\162\2\12\1\0\5\12\5\0\1\12\10\0"+
    "\2\12\22\0\3\12\1\163\11\12\1\0\5\12\5\0"+
    "\1\12\10\0\2\12\22\0\15\12\1\0\3\12\1\164"+
    "\1\12\5\0\1\12\10\0\2\12\22\0\2\12\1\165"+
    "\12\12\1\0\5\12\13\0\1\166\56\0\1\12\10\0"+
    "\2\12\22\0\10\12\1\167\4\12\1\0\5\12\5\0"+
    "\1\12\10\0\2\12\22\0\13\12\1\170\1\12\1\0"+
    "\5\12\5\0\1\12\10\0\2\12\22\0\15\12\1\0"+
    "\1\12\1\171\3\12\5\0\1\12\10\0\2\12\22\0"+
    "\6\12\1\172\6\12\1\0\5\12\12\0\1\173\57\0"+
    "\1\12\10\0\2\12\22\0\14\12\1\174\1\0\5\12"+
    "\5\0\1\12\10\0\2\12\22\0\1\175\14\12\1\0"+
    "\5\12\5\0\1\12\10\0\2\12\22\0\10\12\1\176"+
    "\4\12\1\0\5\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4293];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\11\1\7\11\4\1\3\11"+
    "\11\1\1\11\4\1\1\0\1\11\3\0\1\1\1\0"+
    "\2\11\2\1\10\11\21\1\1\0\2\11\17\1\1\0"+
    "\14\1\1\0\7\1\1\0\4\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[126];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public JSLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JSLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 59: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 60: break;
          case 3: 
            { return NUMBER;
            }
          case 61: break;
          case 4: 
            { return DOT;
            }
          case 62: break;
          case 5: 
            { return OP_4;
            }
          case 63: break;
          case 6: 
            { return OP_3;
            }
          case 64: break;
          case 7: 
            { return VNAME;
            }
          case 65: break;
          case 8: 
            { return EQ;
            }
          case 66: break;
          case 9: 
            { return OP_5;
            }
          case 67: break;
          case 10: 
            { return OP_1;
            }
          case 68: break;
          case 11: 
            { return OP_2;
            }
          case 69: break;
          case 12: 
            { return LP;
            }
          case 70: break;
          case 13: 
            { return RP;
            }
          case 71: break;
          case 14: 
            { return LP2;
            }
          case 72: break;
          case 15: 
            { return RP2;
            }
          case 73: break;
          case 16: 
            { return LP3;
            }
          case 74: break;
          case 17: 
            { return RP3;
            }
          case 75: break;
          case 18: 
            { return OP_10;
            }
          case 76: break;
          case 19: 
            { return OP_6;
            }
          case 77: break;
          case 20: 
            { return OP_8;
            }
          case 78: break;
          case 21: 
            { return SEMI;
            }
          case 79: break;
          case 22: 
            { return COLON;
            }
          case 80: break;
          case 23: 
            { return COMMA;
            }
          case 81: break;
          case 24: 
            { return T_IF;
            }
          case 82: break;
          case 25: 
            { return STRING;
            }
          case 83: break;
          case 26: 
            { return COMMENT;
            }
          case 84: break;
          case 27: 
            { return DIVEQ;
            }
          case 85: break;
          case 28: 
            { return MULEQ;
            }
          case 86: break;
          case 29: 
            { return EQ2;
            }
          case 87: break;
          case 30: 
            { return DEQ;
            }
          case 88: break;
          case 31: 
            { return PLUSEQ;
            }
          case 89: break;
          case 32: 
            { return INCREMENT;
            }
          case 90: break;
          case 33: 
            { return MINUSEQ;
            }
          case 91: break;
          case 34: 
            { return DECREMENT;
            }
          case 92: break;
          case 35: 
            { return OP_7;
            }
          case 93: break;
          case 36: 
            { return OP_9;
            }
          case 94: break;
          case 37: 
            { return AND;
            }
          case 95: break;
          case 38: 
            { return OR;
            }
          case 96: break;
          case 39: 
            { return IF;
            }
          case 97: break;
          case 40: 
            { return DO;
            }
          case 98: break;
          case 41: 
            { return EQ3;
            }
          case 99: break;
          case 42: 
            { return DEQ2;
            }
          case 100: break;
          case 43: 
            { return FOR;
            }
          case 101: break;
          case 44: 
            { return NEW;
            }
          case 102: break;
          case 45: 
            { return VAR;
            }
          case 103: break;
          case 46: 
            { return TRUE;
            }
          case 104: break;
          case 47: 
            { return THIS;
            }
          case 105: break;
          case 48: 
            { return ELSE;
            }
          case 106: break;
          case 49: 
            { return NULL;
            }
          case 107: break;
          case 50: 
            { return CASE;
            }
          case 108: break;
          case 51: 
            { return FALSE;
            }
          case 109: break;
          case 52: 
            { return WHILE;
            }
          case 110: break;
          case 53: 
            { return BREAK;
            }
          case 111: break;
          case 54: 
            { return RETURN;
            }
          case 112: break;
          case 55: 
            { return SWITCH;
            }
          case 113: break;
          case 56: 
            { return MULTILINE_COMMENT;
            }
          case 114: break;
          case 57: 
            { return DEFAULT;
            }
          case 115: break;
          case 58: 
            { return FUNCTION;
            }
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
