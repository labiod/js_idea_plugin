{
    parserClass="com.kgb.js.parser.JSParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="JS"
    psiImplClassSuffix="Impl"
    psiPackage="com.kgb.js.psi"
    psiImplPackage="com.kgb.js.psi.impl"
    psiImplUtilClass="com.kgb.js.psi.impl.JSPsiImplUtil"

    elementTypeHolderClass="com.kgb.js.psi.JSTypes"
    elementTypeClass="com.kgb.js.psi.JSElementType"
    tokenTypeClass="com.kgb.js.psi.JSTokenType"

    psiImplUtilClass="com.kgb.js.psi.impl.JSPsiImplUtil"
//    parserUtilClass="com.kgb.js.parser.JSPsiImplUtil"

    tokens=[
        EQ="="
        EQ2="=="
        EQ3="==="
        DEQ="!="
        DEQ2="!=="
        PLUSEQ="+="
        MINUSEQ="-="
        MULEQ="*="
        DIVEQ="/="
        LP='{'
        RP='}'
        LP2='('
        RP2=')'
        LP3='['
        RP3=']'

        op_1='+'
        op_2='-'
        op_3='*'
        op_4='/'
        op_5='!'
        op_10='%'
        op_6='>'
        op_7='>='
        op_8='<'
        op_9='<='

        AND='&&'
        OR='||'

        number='regexp:\d+(\.\d*)?'
        string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
        SEMI=";"
        COLON=":"
        COMMA=","
        DOT='.'
        INCREMENT='++'
        DECREMENT='--'

        newline = "regexp:\n"
        space='regexp:[\s\t]+'
        comment='regexp://.*'
        multiline_comment='regexp:/\*.*\n\t\r\*/'
        vname='regexp:\p{Alpha}\w*'

        TRUE="true"
        FALSE="false"
        NULL="null"

        // keywords
        var='var'
        function='function'
        if='if'
        t_if='?'
        else='else'
        for='for'
        switch='switch'
        case='case'
        break='break'
        default='default'
        return='return'
        while='while'
        do='do'
        this="this"
        new="new"
    ]

    name(".*expr")='expression'
    extends(".*expr")=expr
}

root ::= root_item *

private root_item ::= (ternary_block | function_def | function_call | var_declaration | this_type | object | var_property | js_statement) end_statement?
private js_statement ::=  if_statement | for_statement | switch_def | return_statement | while_statement | do_while_statement
private end_statement ::= SEMI

var_declaration ::= var_name eq_op var_value {methods=[getVar getValue]}
var_name ::= ((var? var_property) | this_type)
var_value ::= (object_create | ternary_block | expr)
private eq_op ::= '=' | PLUSEQ | MINUSEQ | MULEQ | DIVEQ
var_property ::= <<dot_separated_list(string | function_call | ref_expr | array)>>

//variable arithmetic
expr ::= factor plus_expr *
left plus_expr ::= plus_op factor
private plus_op ::= op_1 | op_2
private factor ::= primary mul_expr *
left mul_expr ::= mul_op primary
private mul_op ::= op_3 | op_4 | op_10
private primary ::= primary_inner factorial_expr ?
left factorial_expr ::= op_5
private primary_inner ::= this_type | var_property | function_def | literal_expr | ref_expr | object | parent
parent ::= '(' (cond | expr) ')' {pin=1}
ref_expr ::= var_inc_dec | (vname (LP3 (vname | base_type) RP3 )?)
this_type ::= this ( '.' var_property)?
private literal_expr ::= base_type
//variable arithmetic end

//condition expression
cond ::= factor_cond or_expr *
left or_expr ::= OR factor_cond
private factor_cond ::= primary_cond and_expr *
left and_expr ::= AND primary_cond
private primary_cond ::= factorial_expr ? primary_inner_cond
private primary_inner_cond ::=  cond_expr | parent

array ::= LP3 <<comma_separated_list(object | vname | base_type)>> RP3
//root_item definition
function_def ::= function vname? fun_args LP body RP
function_call ::= vname LP2 fun_params? RP2
private fun_args ::= LP2 <<comma_separated_list(vname)>>? RP2
private fun_params ::= <<comma_separated_list(ternary_block|function_call|expr|base_type|)>>
private body ::= root_item*

if_statement ::= if LP2 (ternary_block | cond) RP2 LP body RP else_if_statement*
else_if_statement ::= (else if LP2 (ternary_block | cond) RP2 LP body RP) | else_statement
else_statement ::= else LP body RP
ternary_block ::= cond '?' (ternary_block | var_property | base_type) ':' (ternary_block | var_property | base_type)

return_statement ::= return (expr | ternary_block | cond)
for_statement ::= for LP2 for_init SEMI cond SEMI for_final_expr RP2 LP body RP
switch_def ::= switch LP2 var_property RP2 LP switch_body RP
private switch_body ::= case_block* default_block?
case_block ::= case (base_type | vname) ':' body break_def?
default_block ::= default ':' body
private break_def ::= break ';'
private for_init ::= <<comma_separated_list(var_declaration)>>
private for_final_expr ::= <<comma_separated_list(var_inc_dec)>>
var_inc_dec ::= (vname (INCREMENT | DECREMENT)) | ((INCREMENT | DECREMENT) vname)

while_statement ::= while LP2 (ternary_block | cond) RP2 LP body RP
do_while_statement ::= do LP body RP while LP2 (ternary_block | cond) RP2

cond_expr ::= expr ((eq_st | lw_st | gr_st) expr)?

private eq_st ::= EQ | EQ2 | EQ3 | DEQ | DEQ2
private gr_st ::= op_6 | op_7
private lw_st ::= op_8 | op_9

object ::= LP object_fields? RP
object_create ::= new vname LP2 fun_params? RP2
private object_fields ::= <<comma_separated_list(object_field)>>
object_field ::= (vname | string) (COLON expr)?

base_type ::= number | string | true | false | null

meta comma_separated_list ::= <<param>> (',' <<param>>) *
meta dot_separated_list ::= <<param>> ('.' <<param>>) *